"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const unibeautify_1 = require("unibeautify");
const readPkgUp = __importStar(require("read-pkg-up"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const cosmiconfig_1 = __importDefault(require("cosmiconfig"));
const { pkg } = readPkgUp.sync({ cwd: __dirname });
exports.beautifier = {
    name: "ClangFormat",
    package: pkg,
    badges: [
        {
            description: "Build Status",
            url: "https://travis-ci.com/Unibeautify/beautifier-clang-format.svg?branch=master",
            href: "https://travis-ci.com/Unibeautify/beautifier-clang-format",
        },
        {
            description: "Test Coverage",
            url: "https://api.codeclimate.com/v1/badges/8b4e5b19de96f4744ffa/test_coverage",
            href: "https://codeclimate.com/github/Unibeautify/beautifier-clang-format/test_covera" +
                "ge",
        },
        {
            description: "Maintainability",
            url: "https://api.codeclimate.com/v1/badges/8b4e5b19de96f4744ffa/maintainability",
            href: "https://codeclimate.com/github/Unibeautify/beautifier-clang-format/maintainabi" +
                "lity",
        },
        {
            description: "Greenkeeper",
            url: "https://badges.greenkeeper.io/Unibeautify/beautifier-clang-format.svg",
            href: "https://greenkeeper.io/",
        },
    ],
    options: {
        "C": true,
        "C++": true,
        Java: true,
        "Objective-C": true
    },
    dependencies: [
        {
            type: unibeautify_1.DependencyType.Executable,
            name: "ClangFormat",
            program: "clang-format",
            parseVersion: [/clang-format version (\d+\.\d+\.\d+)/],
            homepageUrl: "https://clang.llvm.org/docs/ClangFormat.html",
            installationUrl: "https://clang.llvm.org/docs/ClangFormat.html",
            bugsUrl: "https://clang.llvm.org/docs/ClangFormat.html",
            badges: [],
        },
    ],
    resolveConfig: ({ filePath, projectPath }) => {
        const configFiles = [".clang-format", "_clang-format"];
        return findFile({
            finishPath: projectPath,
            startPath: filePath,
            fileNames: configFiles,
        })
            .then(configFile => ({ filePath: configFile }))
            .catch(err => {
            // tslint:disable-next-line no-console
            console.log(err);
            return Promise.resolve({});
        });
    },
    beautify({ text, dependencies, filePath, beautifierConfig, }) {
        const clangFormat = dependencies.get("ClangFormat");
        return generateConfigArgs(beautifierConfig)
            .then(configArgs => {
            // tslint:disable-next-line no-console
            console.log(`Using config: ${configArgs}`);
            return clangFormat
                .run({
                args: [`-assume-filename=${filePath}`, ...configArgs],
                stdin: text,
            })
                .then(({ exitCode, stderr, stdout }) => {
                if (exitCode) {
                    return Promise.reject(stderr);
                }
                return Promise.resolve(stdout);
            });
        });
    },
};
function findFile({ finishPath = "/", startPath = finishPath, fileNames, }) {
    const filePaths = fileNames.map(fileName => path.join(startPath, fileName));
    return Promise.all(filePaths.map(doesFileExist))
        .then(exists => filePaths.filter((filePath, index) => exists[index]))
        .then(foundFilePaths => {
        if (foundFilePaths.length > 0) {
            return foundFilePaths[0];
        }
        if (startPath === finishPath) {
            return Promise.reject("No config file found");
        }
        const parentDir = path.resolve(startPath, "../");
        return findFile({ startPath: parentDir, finishPath, fileNames });
    });
}
function doesFileExist(filePath) {
    return new Promise(resolve => {
        fs.access(filePath, fs.constants.R_OK, error => resolve(!error));
    });
}
function generateConfigArgs(beautifierConfig) {
    if (beautifierConfig && beautifierConfig.filePath) {
        return loadConfigurationFromFile(beautifierConfig.filePath)
            .then((config) => {
            return [`-style=${config}`];
        });
    }
    return Promise.resolve(["-style=file"]);
}
function loadConfigurationFromFile(filePath) {
    const configExplorer = cosmiconfig_1.default("", {});
    return configExplorer
        .load(filePath)
        .then(result => {
        if (result) {
            return JSON.stringify(result.config);
        }
    })
        .catch(error => {
        return Promise.reject(error);
    });
}
exports.default = exports.beautifier;
//# sourceMappingURL=index.js.map